---
- name: Determine latest tomcat build for given version.
  script: tomcat_find_latest_version.py {{ tomcat_version }}
  register: tomcat_download_link

- name: Register tomcat's name.
  set_fact: tomcat_name="{{ tomcat_download_link.stdout.strip().split('/')[-1].split('.tar.gz')[0] }}"

- name: Check if tomcat is already installed.
  stat:
    path: "/opt/{{ tomcat_name }}"
  register: tcat_dir

- name: Download tomcat_distro.
  get_url:
    url: "{{ tomcat_download_link.stdout }}"
    dest: "/tmp/{{ tomcat_download_link.stdout.strip().split('/')[-1] }}"
    mode: 0440
  when: tcat_dir.stat.isdir is not defined

- name: Untar tomcat.
  unarchive:
    src: "/tmp/{{ tomcat_download_link.stdout.strip().split('/')[-1] }}"
    dest: "/opt"
    remote_src: True
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user }}"
  when: tcat_dir.stat.isdir is not defined

- name: Create setenv file for tomcat.
  template:
    src: setenv.sh.j2
    dest: "/opt/{{ tomcat_name }}/bin/setenv.sh"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user }}"
    force: yes
    mode: 0644

- name: Create server.xml file for tomcat.
  template:
    src: server.xml.j2
    dest: "/opt/{{ tomcat_name }}/conf/server.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user }}"
    force: yes
    mode: 0644

- name: Create logback.xml for tomcat.
  template:
    src: logback.xml.j2
    dest: "/opt/{{ tomcat_name }}/conf/logback.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user }}"
    force: yes
    mode: 0644

- name: Create systemd file for tomcat.
  template:
    src: tomcat.service.j2
    dest: "/etc/systemd/system/tomcat.service"
    owner: root
    group: root
    backup: yes
    force: yes
    mode: 0644

- name: Add firewall exception. If firewall is on.
  firewalld: port=8080/tcp permanent=true state=enabled immediate=yes
  ignore_errors: yes

- name: Start and enable tomcat for systemd.
  systemd:
    state: started
    name: tomcat
    daemon_reload: yes
    enabled: yes
